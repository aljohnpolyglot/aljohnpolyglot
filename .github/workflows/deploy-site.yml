# .github/workflows/deploy-site.yml
name: Deploy Full Site to GitHub Pages with Generated App Keys

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout üõéÔ∏è
        uses: actions/checkout@v4 # Checks out your repo to the workspace root

      - name: Prepare STAGING directory and copy ALL source files üìÅ
        run: |
          echo "Creating staging_dir..."
          mkdir staging_dir
          echo "Copying all committed files (respecting root .gitignore for THIS copy) from workspace to staging_dir..."
          # This rsync will copy everything committed, excluding .git itself.
          # It WILL copy your root .gitignore into staging_dir. We will remove it next.
          rsync -av --progress --exclude='.git/' --exclude='staging_dir/' . ./staging_dir/
          echo "Removing root .gitignore from staging_dir (if it was copied)..."
          rm -f ./staging_dir/.gitignore
          echo "Staging directory prepared."

      - name: Create API Keys file in STAGING directory üîë
        run: |
          STAGING_API_KEYS_PATH="staging_dir/polyglot_connect/js/config/api_keys.js"
          echo "Ensuring directory exists: $(dirname "$STAGING_API_KEYS_PATH")"
          mkdir -p "$(dirname "$STAGING_API_KEYS_PATH")" # Create .../js/config inside staging_dir/polyglot_connect/

          echo "Creating $STAGING_API_KEYS_PATH with secrets..."
          echo "// This file is auto-generated by GitHub Action during deployment." > "$STAGING_API_KEYS_PATH"
          echo "console.log('api_keys.js (generated by GitHub Action) loaded.');" >> "$STAGING_API_KEYS_PATH"
          echo "window.GEMINI_API_KEY = '${{ secrets.GEMINI_API_KEY }}';" >> "$STAGING_API_KEYS_PATH"
          echo "window.GEMINI_API_KEY_ALT = '${{ secrets.GEMINI_API_KEY_ALT }}';" >> "$STAGING_API_KEYS_PATH"
          echo "window.GEMINI_API_KEY_ALT_2 = '${{ secrets.GEMINI_API_KEY_ALT_2 }}';" >> "$STAGING_API_KEYS_PATH"
          echo "window.GROQ_API_KEY = '${{ secrets.GROQ_API_KEY }}';" >> "$STAGING_API_KEYS_PATH"
          echo "window.TOGETHER_API_KEY = '${{ secrets.TOGETHER_API_KEY }}';" >> "$STAGING_API_KEYS_PATH"
          echo "$STAGING_API_KEYS_PATH created successfully."
        env:
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          GEMINI_API_KEY_ALT: ${{ secrets.GEMINI_API_KEY_ALT }}
          GEMINI_API_KEY_ALT_2: ${{ secrets.GEMINI_API_KEY_ALT_2 }}
          GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}

      - name: Verify STAGING Directory Content (Very Detailed) üîç
        run: |
          echo "--- Full recursive listing of staging_dir (first few levels) ---"
          ls -R staging_dir | head -n 50 # Show a good chunk of the structure
          echo "--- Specifically listing staging_dir/polyglot_connect/js/ ---"
          ls -A staging_dir/polyglot_connect/js/
          echo "--- Specifically listing staging_dir/polyglot_connect/js/config/ ---"
          ls -A staging_dir/polyglot_connect/js/config/ || echo "Config folder NOT FOUND in staging_dir/polyglot_connect/js/"
          echo "--- Content of staged api_keys.js (first 5 lines) ---"
          head -n 5 staging_dir/polyglot_connect/js/config/api_keys.js || echo "api_keys.js NOT FOUND in staging_dir/polyglot_connect/js/config/"
          echo "--- Checking for .gitignore in staging_dir root ---"
          ls -A staging_dir/.gitignore || echo "No .gitignore in staging_dir root (GOOD!)"

      - name: Deploy staged content to root of gh-pages branch üöÄ
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./staging_dir # Publish from the staging directory
          keep_files: false 
          force_orphan: true